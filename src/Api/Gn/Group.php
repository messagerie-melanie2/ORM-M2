<?php
/**
 * Ce fichier est développé pour la gestion de la lib MCE
 *
 * Cette Librairie permet d'accèder aux données sans avoir à implémenter de couche SQL
 * Des objets génériques vont permettre d'accèder et de mettre à jour les données
 *
 * ORM Mél Copyright © 2021 Groupe Messagerie/MTE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
namespace LibMelanie\Api\Gn;

use LibMelanie\Api\Defaut;
use LibMelanie\Config\MappingMce;
use LibMelanie\Ldap\Ldap;

/**
 * Classe groupe LDAP pour GN
 *
 * @author Groupe Messagerie/MTE - Apitech
 * @package LibMCE
 * @subpackage API/GN
 * @api
 *
 * @property string $dn DN du groupe l'annuaire
 * @property string $fullname Nom complet du groupe LDAP
 * @property string $type Type de groupe (voir Mce\Users\Type::*)
 * @property string $email Adresse email principale de l'utilisateur
 * @property array $email_list Liste de toutes les adresses email de l'utilisateur
 * @property User[] $members Liste des membres appartenant au groupe
 * @property array $members_email Liste des adresses e-mail de la liste
 * @property array $owners Liste des propriétaires du groupe LDAP
 * @property string $service Service du groupe dans l'annuaire
 * @property-read boolean $is_dynamic Est-ce qu'il s'agit d'une liste dynamique ?
 */
class Group extends Defaut\Group {

    const MAPPING = [
        "cn" => [MappingMce::name=> "cn", MappingMce::type => MappingMce::stringLdap],
        "groupnumber" => [MappingMce::name=> "groupnumber", MappingMce::type => MappingMce::stringLdap]
    ];

    public function __construct($server = null, $itemName = null)
    {
        if($server === null) {$server = \LibMelanie\Config\Ldap::$SEARCH_LDAP;}
        parent::__construct($server, $itemName);
    }


    /**
     * comment doit se faire la résolution d'un attr ldap
     * lorsque l'attr en question est lui même déjà mappé dans la conf globale
     * je le résoud ainsi.., bon ou pas ?
     * @param null $attributes
     * @return bool
     */
    public function load($attributes = ["dn", "email", "fullname","groupNumber", "cn", "gidNumber"])
    {

        $key = Ldap::GetMap("groupNumber", $this->_server);
        $ret = parent::load($attributes); // TODO: Change the autogenerated stub
        $this->groupNumber = $this->$key;


        $ldap = Ldap::GetInstance($this->_server);
        $bdn = $ldap->getConfig('base_dn');
        $filter = $ldap->getConfig('get_group_filter_by_gid');
        $filter = str_replace("%%gidNumber%%", 100000+$this->groupNumber, $filter);
        dd($filter);
        $r = $ldap->search($bdn,$filter, ["gidNumber","cn"]);
        $infos = $ldap->get_entries($r);
        dd($infos);
        return $ret;

    }


}
